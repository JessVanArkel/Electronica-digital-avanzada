#include "mbed.h"

SPI spi(D11, D12, D13); 
DigitalOut latch(D10);   
DigitalOut cs(D9);       
PwmOut led(D3);          
AnalogIn pot(A0);        

#define RS (1 << 2)
#define E  (1 << 3)
#define D4 (1 << 4)
#define D5 (1 << 5)
#define D6 (1 << 6)
#define D7 (1 << 7)

void shiftOut(uint8_t data) {
    latch = 0;
    spi.write(data);
    latch = 1;
}

void pulseEnable(uint8_t data) {
    shiftOut(data | E);
    ThisThread::sleep_for(1);
    shiftOut(data & ~E);
    ThisThread::sleep_for(1);  
}

void sendNibble(uint8_t nibble, bool rs) {
    uint8_t data = (nibble << 4) & (D4 | D5 | D6 | D7);
    if (rs) data |= RS;
    pulseEnable(data);
}

void sendByte(uint8_t value, bool rs) {
    sendNibble(value >> 4, rs);
    sendNibble(value & 0x0F, rs);
}

void lcdCommand(uint8_t cmd) {
    sendByte(cmd, false);
}

void lcdData(char data) {
    sendByte(data, true);
}

void lcdInit() {
    ThisThread::sleep_for(50);  
    sendNibble(0x03, false);
    ThisThread::sleep_for(5);  
    sendNibble(0x03, false);
    ThisThread::sleep_for(1);  
    sendNibble(0x03, false);
    sendNibble(0x02, false);

    lcdCommand(0x28);
    lcdCommand(0x0C);
    lcdCommand(0x06);
    lcdCommand(0x01);
    ThisThread::sleep_for(2);   
}

void lcdPrint(const char* str) {
    while (*str) {
        lcdData(*str++);
    }
}

float readTemperature() {
    cs = 0; 
    ThisThread::sleep_for(1); 

    uint16_t data = spi.write(0x00) << 8;
    data |= spi.write(0x00);

    cs = 1; 

    if (data & 0x4) return -1; 

    return (data >> 3) * 0.25;
}

int main() {
    spi.format(8, 0);
    spi.frequency(1000000);

    lcdInit();
    lcdPrint("Iniciando...");
    
    int counter = 0;  

    while (true) {
        float temperature = readTemperature();
        float potValue = pot.read(); 

        printf("Contador: %d | Temp: %.2f C | Pot: %.2f\n", counter, temperature, potValue);

        lcdCommand(0x01); 
        ThisThread::sleep_for(2); 

        lcdPrint("Temp: ");
        char tempBuffer[8];
        sprintf(tempBuffer, "%.2fC", temperature);
        lcdPrint(tempBuffer);

        lcdCommand(0xC0);
        lcdPrint("Count is ");
        char countBuffer[8];
        sprintf(countBuffer, "%d", counter);
        lcdPrint(countBuffer);

        led.write(potValue);

        counter++;

        ThisThread::sleep_for(1000);
    }
}
