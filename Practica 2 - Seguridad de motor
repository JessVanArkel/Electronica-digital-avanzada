#include "mbed.h"
#include "platform/mbed_thread.h"
#include "rtos.h"
#include "chrono"
using namespace std::chrono_literals;


DigitalIn BotonArranque(D10);     
DigitalIn BotonParo(D5);         
DigitalIn Guarda(D3);            
DigitalIn Temperatura(D2);       

DigitalOut led1(D7);    
DigitalOut led2(D6);    
DigitalOut led3(D8);    
DigitalOut led4(D9);    

bool MotorListo = false;
bool MotorCorriendo = false;

Timer timer_parpadeo;
bool estado_led1 = false;

void verificarEstado() {
    printf("Entradas - G: %d, T: %d, BA: %d, BP: %d\n", 
           Guarda.read(), Temperatura.read(), BotonArranque.read(), BotonParo.read());
    
    MotorListo = (Guarda.read() == 0) && (Temperatura.read() == 0);
    
    if (MotorListo) {
        led1 = 1;
    } else {
        if (timer_parpadeo.read_ms() >= 500) {
            estado_led1 = !estado_led1;
            led1 = estado_led1;
            timer_parpadeo.reset();
        }
    }
}

int main() {
    timer_parpadeo.start();
    printf("Sistema iniciado\n");
    
    while(1) {
        verificarEstado();
        
        if (MotorListo && (BotonArranque.read() == 0) && !MotorCorriendo) {
            MotorCorriendo = true;
            led2 = 1;
            led3 = 0;
            led4 = 0;
            printf("Motor arrancado\n");
        }
        
        if (MotorCorriendo) {
            if (Guarda.read() == 1) {  
                MotorCorriendo = false;
                led2 = 0;
                led3 = 1;
                printf("Falla: Guarda abierta\n");
            }
            if (Temperatura.read() == 1) {  
                MotorCorriendo = false;
                led2 = 0;
                led4 = 1;
                printf("Falla: Temperatura alta\n");
            }
        }
        
        if ((BotonParo.read() == 0) && MotorCorriendo) {
            MotorCorriendo = false;
            led2 = 0;
            printf("Motor detenido manualmente\n");
        }
        
        thread_sleep_for(50);
    }
}
